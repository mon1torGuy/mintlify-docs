{
	"openapi": "3.0.0",
	"info": {
		"title": "Type Auth API",
		"description": "API for managing applications, authentication, monitoring, and security features",
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": "https://api.typeauth.com"
		}
	],
	"tags": [
		{
			"name": "Application",
			"description": "Application management endpoints"
		},
		{
			"name": "Token",
			"description": "Token endpoints"
		},
		{
			"name": "JWT",
			"description": "JWT configuration endpoints"
		},
		{ "name": "Authentication", "description": "Authentication endpoints" },
		{
			"name": "JWK",
			"description": "JWK (JSON Web Key) management endpoints"
		},
		{
			"name": "Security",
			"description": "Security and firewall configuration endpoints"
		},
		{
			"name": "Fraud and abuse prevention",
			"description": "Abuse prevention and rate limiting endpoints"
		},
		{
			"name": "Monitor",
			"description": "Application monitoring endpoints"
		},
		{
			"name": "Routing",
			"description": "Route configuration endpoints"
		},
		{
			"name": "Tag",
			"description": "Tag management endpoints"
		}
	],
	"paths": {
		"/{account_id}/applications/create": {
			"post": {
				"tags": ["Applications"],
				"summary": "Create a new application",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateApplicationRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Application created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationResponse"
								}
							}
						}
					}
				}
			}
		},
		"/{account_id}/applications": {
			"get": {
				"tags": ["Applications"],
				"summary": "List all applications",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Applications retrieved successfully"
					}
				}
			}
		},
		"/{account_id}/applications/{application_id}": {
			"get": {
				"tags": ["Applications"],
				"summary": "Get application details",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Application details retrieved successfully"
					}
				}
			},
			"patch": {
				"tags": ["Applications"],
				"summary": "Update application",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Application updated successfully"
					}
				}
			},
			"delete": {
				"tags": ["Applications"],
				"summary": "Delete application",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Application deleted successfully"
					}
				}
			}
		},
		"/{account_id}/authentication/create": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Create a new authentication profile",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAuthenticationRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Authentication profile created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationResponse"
								}
							}
						}
					}
				}
			}
		},
		"/{account_id}/authentication": {
			"get": {
				"tags": ["Authentication"],
				"summary": "List all authentication profiles",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Applications retrieved successfully"
					}
				}
			}
		},
		"/{account_id}/authentication/{authentication_id}": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Get authentication details",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "authentication profile details retrieved successfully"
					}
				}
			},
			"patch": {
				"tags": ["Authentication"],
				"summary": "Update authentication",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "authentication updated successfully"
					}
				}
			},
			"delete": {
				"tags": ["Authentication"],
				"summary": "Delete authentication",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "authentication deleted successfully"
					}
				}
			}
		},
		"/{account_id}/token/create/{application_id}": {
			"post": {
				"tags": ["Token"],
				"summary": "Create a new Token",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTokenRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Application created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationResponse"
								}
							}
						}
					}
				}
			}
		},

		"/{account_id}/token/{application_id/{key_id}": {
			"delete": {
				"tags": ["Token"],
				"summary": "Delete a key",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "key_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key deleted successfully"
					}
				}
			}
		},
		"/{account_id}/jwk": {
			"get": {
				"tags": ["JWK"],
				"summary": "List all JWKs",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "JWKs retrieved successfully"
					}
				}
			}
		},
		"/{account_id}/jwk/{jwk_id}": {
			"get": {
				"tags": ["JWK"],
				"summary": "Get a JWK",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "jwk_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "JWKs retrieved successfully"
					}
				}
			},
			"delete": {
				"tags": ["JWK"],
				"summary": "Delete a JWK",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "JWK deleted successfully"
					}
				}
			}
		},
		"/{account_id}/jwk/create": {
			"post": {
				"tags": ["JWK"],
				"summary": "Create a new JWK",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateJWKRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "JWK created successfully"
					}
				}
			}
		},
		"/{account_id}/jwt": {
			"get": {
				"tags": ["JWT"],
				"summary": "List all JWTs",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "JWTs retrieved successfully"
					}
				}
			}
		},
		"/{account_id}/jwt/{jwt_id}": {
			"get": {
				"tags": ["JWT"],
				"summary": "Get a JWTs",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "jwt_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "JWTs retrieved successfully"
					}
				}
			},
			"delete": {
				"tags": ["JWT"],
				"summary": "Delete a JWT",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "jwt_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "JWT deleted successfully"
					}
				}
			}
		},
		"/{account_id}/jwt/create": {
			"post": {
				"tags": ["JWT"],
				"summary": "Create a new JWT",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateJWTRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "JWT created successfully"
					}
				}
			}
		},
		"/{account_id}/security/geoblock/{application_id}": {
			"patch": {
				"tags": ["Security"],
				"summary": "Update geoblocking settings",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "area",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"only_us",
								"only_eu",
								"only_ge",
								"only_au",
								"only_in",
								"only_useu",
								"block_tor",
								"disabled"
							]
						},
						"examples": {
							"us": {
								"value": "only_us",
								"summary": "Allow only US traffic"
							},
							"eu": {
								"value": "only_eu",
								"summary": "Allow only EU traffic"
							},
							"ge": {
								"value": "only_ge",
								"summary": "Allow only GE traffic"
							},
							"au": {
								"value": "only_au",
								"summary": "Allow only AU traffic"
							},
							"in": {
								"value": "only_in",
								"summary": "Allow only IN traffic"
							},
							"useu": {
								"value": "only_useu",
								"summary": "Allow only US and EU traffic"
							},
							"Tor": {
								"value": "block_tor",
								"summary": "Block Tor traffic"
							},
							"disabled": {
								"value": "disabled",
								"summary": "Disable geoblocking"
							}
						}
					}
				],

				"responses": {
					"200": {
						"description": "Geoblocking settings updated successfully"
					},
					"400": {
						"description": "Missing parameters"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/{account_id}/security/waf/{application_id}": {
			"patch": {
				"tags": ["Security"],
				"summary": "Update Web application firewall settings",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "application_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["disable", "enable"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Geoblocking settings updated successfully"
					},
					"400": {
						"description": "Missing parameters"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/{account_id}/security": {
			"get": {
				"tags": ["Security"],
				"summary": "Get security settings",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Geoblocking settings updated successfully"
					},
					"400": {
						"description": "Missing parameters"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/{account_id}/abuse": {
			"get": {
				"tags": ["Abuse Prevention"],
				"summary": "List all Fraud and Abuse prevention profiles",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Abuse prevention profiles retrieved successfully"
					}
				}
			}
		},
		"/{account_id}/abuse/{abuse_id}": {
			"get": {
				"tags": ["Abuse Prevention"],
				"summary": "Get a fraud and abuse profiles",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "abuse_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Abuse prevention profiles retrieved successfully"
					}
				}
			},
			"delete": {
				"tags": ["Abuse Prevention"],
				"summary": "Delete a fraud and abuse profiles",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "abuse_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Abuse prevention profiles deleted successfully"
					}
				}
			}
		},
		"/{account_id}/abuse/create": {
			"post": {
				"tags": ["Abuse Prevention"],
				"summary": "Create a new fraud and abuse prevention profile",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAbuseProfileRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Abuse prevention profile created successfully"
					}
				}
			}
		},
		"/{account_id}/monitor/create": {
			"post": {
				"tags": ["Monitor"],
				"summary": "Create a new monitor",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateMonitorRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Monitor created successfully"
					}
				}
			}
		},
		"/{account_id}/monitor/": {
			"get": {
				"tags": ["Monitor"],
				"summary": "List all monitors",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Monitors retrieved successfully"
					},
					"404": {
						"description": "Monitors not found"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/{account_id}/monitor/{monitor_id}": {
			"get": {
				"tags": ["Monitor"],
				"summary": "Get a monitor",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "monitor_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Monitor retrieved successfully"
					},
					"404": {
						"description": "Monitor not found"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			},
			"delete": {
				"tags": ["Monitor"],
				"summary": "Delete a monitor",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "monitor_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Monitor created successfully"
					},
					"404": {
						"description": "Monitor not found"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/{account_id}/routing": {
			"get": {
				"tags": ["Routing"],
				"summary": "List all routing profiles",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Routing profiles retrieved successfully"
					}
				}
			}
		},
		"/{account_id}/routing{routing_id}": {
			"delete": {
				"tags": ["Routing"],
				"summary": "Delete a routing profile",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "routing_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Routing profile deleted successfully"
					},
					"404": {
						"description": "Routing profile not found"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			},
			"get": {
				"tags": ["Routing"],
				"summary": "Get a routing profile",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "routing_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Routing profile retrieved successfully"
					},
					"404": {
						"description": "Routing profile not found"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/{account_id}/routing/create": {
			"post": {
				"tags": ["Routing"],
				"summary": "Create a new routing profile",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateRoutingRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Routing profile created successfully"
					}
				}
			}
		},
		"/{account_id}/tags": {
			"get": {
				"tags": ["Tags"],
				"summary": "List all tags",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Tags retrieved successfully"
					}
				}
			}
		},
		"/{account_id}/tag/{tag_id}": {
			"delete": {
				"tags": ["Tags"],
				"summary": "Delete a tag",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Tag deleted successfully"
					}
				}
			}
		},
		"/{account_id}/tag/create": {
			"post": {
				"tags": ["Tags"],
				"summary": "Create a new tag",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTagRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Tag created successfully"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"CreateAuthenticationRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the authentication profile"
					},
					"ratelimit": {
						"type": "object",
						"properties": {
							"limit": {
								"type": "integer"
							},
							"timeWindow": {
								"type": "integer"
							}
						},
						"nullable": true
					},
					"refill": {
						"type": "object",
						"properties": {
							"amount": {
								"type": "integer"
							},
							"interval": {
								"type": "string",
								"enum": ["dalily", "wekkly", "monhtly"]
							}
						},
						"nullable": true
					},
					"remaining": {
						"type": "integer",
						"nullable": true
					},
					"keyType": {
						"type": "string",
						"enum": ["jwt", "token"]
					},
					"jwt_id": {
						"type": "string",
						"nullable": true
					},
					"expires": {
						"type": "integer",
						"nullable": true
					},
					"byteLength": {
						"type": "integer",
						"nullable": true
					},

					"tags": {
						"type": "array",
						"maxItems": 5,
						"uniqueItems": true,
						"description": "Tags of the application",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"CreateApplicationRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the application"
					},
					"description": {
						"type": "string",
						"description": "Description of the application"
					},
					"tags": {
						"type": "array",
						"maxItems": 5,
						"uniqueItems": true,
						"description": "Tags of the application",
						"items": {
							"type": "string"
						}
					},
					"domain": {
						"type": "string",
						"description": "Domain of the application"
					},
					"originHostname": {
						"type": "string",
						"description": "Origin hostname of the application"
					},
					"auth_id": {
						"type": "string",
						"description": "Authentication ID of the application"
					},

					"detailResponse": {
						"type": "boolean",
						"description": "Detail response of the application"
					},

					"routing_id": {
						"type": "string",
						"description": "Routing ID of the application"
					},
					"abuse_id": {
						"type": "string",
						"description": "Fraud and abuse prevention  ID of the application"
					},
					"llmcache_id": {
						"type": "string",
						"description": "LLM Cache ID of the application"
					}
				},
				"required": ["name", "domain", "originHostname", "auth_id"]
			},
			"ApplicationResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Application"
						}
					}
				}
			},
			"Application": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"originHostname": {
						"type": "string"
					},
					"detailResponse": {
						"type": "boolean"
					},
					"auth_id": {
						"type": "string"
					},
					"llmcache_id": {
						"type": "string"
					},
					"abuse_id": {
						"type": "string"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"KeyResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Key"
						}
					}
				}
			},
			"Key": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"expires": {
						"type": "integer",
						"nullable": true,
						"format": "epoch time"
					},
					"remaining": {
						"type": "integer",
						"nullable": true
					},
					"ratelimit": {
						"type": "object",
						"properties": {
							"limit": {
								"type": "integer"
							},
							"timeWindow": {
								"type": "integer"
							}
						},
						"nullable": true
					},
					"refill": {
						"type": "object",
						"properties": {
							"amount": {
								"type": "integer"
							},
							"interval": {
								"type": "string",
								"enum": ["dalily", "wekkly", "monhtly"]
							}
						},
						"nullable": true
					}
				}
			},
			"JWKResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/JWK"
						}
					}
				}
			},
			"CreateJWKRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the JWK"
					},
					"type": {
						"type": "string",
						"description": "Type of the JWK uploaded or fetched"
					},
					"jwtEndpoint": {
						"type": "string",
						"description": "URL of the JWK"
					},
					"jsonKey": {
						"type": "string",
						"description": "JSON key of the JWK"
					}
				},
				"required": ["name", "type"]
			},
			"JWK": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"jwk": {
						"type": "object"
					},
					"kid": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"jwtEndpoint": {
						"type": "string"
					},
					"lastChecked": {
						"type": "integer"
					}
				}
			},
			"JWTResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/JWT"
						}
					}
				}
			},
			"CreateTokenRequest": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "integer",
						"maximum": 100
					},
					"tags": {
						"type": "array",
						"maxItems": 5,
						"uniqueItems": true,
						"description": "Tags of the application",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"CreateTokenResponse": {
				"type": "object",

				"properties": {
					"id": {
						"type": "string"
					},
					"app_id": {
						"type": "string"
					},
					"account_id": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"byteLength": {
						"type": "number"
					},
					"enabled": {
						"type": "boolean"
					},
					"expires": {
						"type": "integer",
						"nullable": true,
						"format": "epoch time"
					},
					"metadata": {
						"type": "string",
						"nullable": true
					},
					"ratelimit": {
						"type": "object",
						"properties": {
							"limit": {
								"type": "integer"
							},
							"timeWindow": {
								"type": "integer"
							}
						},
						"nullable": true
					},
					"refill": {
						"type": "object",
						"properties": {
							"amount": {
								"type": "integer"
							},
							"interval": {
								"type": "string",
								"enum": ["dalily", "wekkly", "monhtly"]
							}
						},
						"nullable": true
					},
					"remaining": {
						"type": "integer",
						"nullable": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				}
			},

			"CreateJWTRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the JWT"
					},
					"path": {
						"type": "array",
						"description": "Path where the JWT is used"
					},
					"exp": {
						"type": "boolean",
						"description": "Expiration of the JWT"
					},
					"nbf": {
						"type": "boolean",
						"description": "Not before of the JWT"
					},
					"kid": {
						"type": "boolean",
						"description": "Key id of the JWT"
					},
					"jwk": {
						"type": "string",
						"description": "JWK ID of the JWT"
					},
					"keys": {
						"type": "array",
						"description": "JWT claims to be checked"
					}
				},
				"required": ["name", "exp", "nbf", "kid", "jwk"]
			},
			"JWT": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"exp": {
						"type": "integer"
					},
					"nbf": {
						"type": "integer"
					},
					"kid": {
						"type": "string"
					},
					"keys": {
						"type": "string"
					},
					"jwk": {
						"type": "string"
					}
				}
			},

			"SecurityResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/SecuritySetting"
						}
					}
				}
			},
			"SecuritySetting": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"isGeoBlock": {
						"type": "boolean"
					},
					"geoBlock": {
						"type": "string"
					},
					"isFirewall": {
						"type": "boolean"
					}
				}
			},
			"CreateAbuseProfileRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"blocklist": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"exceptions": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"rlRequests": {
						"type": "string"
					},
					"rlInterval": {
						"type": "string"
					}
				}
			},
			"AbuseProfileResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AbuseProfile"
						}
					}
				}
			},
			"AbuseProfile": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"blocklist": {
						"type": "string"
					},
					"exceptions": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"globalratelimit": {
						"type": "object",
						"properties": {
							"Requests": {
								"type": "integer"
							},
							"Interval": {
								"type": "string"
							}
						}
					}
				}
			},
			"MonitorResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Monitor"
						}
					}
				}
			},
			"CreateMonitorRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"_id": {
						"type": "string"
					},
					"isActive": {
						"type": "boolean"
					}
				}
			},
			"Monitor": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"status_code": {
						"type": "integer"
					},
					"mon_status": {
						"type": "boolean"
					},
					"responseStatus": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"RoutingResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RoutingProfile"
						}
					}
				}
			},
			"CreateRoutingRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"endpoints": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RoutingEndpoints"
						}
					}
				}
			},
			"RoutingEndpoints": {
				"type": "object",

				"properties": {
					"public_method": {
						"type": "string"
					},
					"public_path": {
						"type": "string"
					},
					"public_headers": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"typeauth_response": {
						"type": "string"
					},
					"typeauth_response_code": {
						"type": "number"
					},
					"typeauth_response_body": {
						"type": "string"
					},
					"typeauth_response_content_type": {
						"type": "string"
					},
					"target_path": {
						"type": "string"
					},
					"target_hostname": {
						"type": "string"
					},
					"target_method": {
						"type": "string"
					}
				}
			},
			"RoutingProfile": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"endpoints": {
						"type": "string"
					},
					"app_name": {
						"type": "string",
						"nullable": true
					}
				}
			},
			"TagResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Tag"
						}
					}
				}
			},
			"CreateTagRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				}
			},
			"Tag": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				}
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "array",
						"items": {
							"type": "object"
						}
					}
				}
			}
		}
	}
}
